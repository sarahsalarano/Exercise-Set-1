library(palmerpenguins)

#Exercises 1.2.5 (1-10):
# Question 1
penguins

#There are 344 rows and 8 columns.

# Question 2

#Per the help file, bill_depth_mm is "a number denoting bill depth (millimeters).

# Question 3
ggplot(data = penguins)
ggplot(data = penguins, mapping = aes (x = bill_length_mm, y = bill_depth_mm))
ggplot(data = penguins, mapping = aes(x = bill_length_mm, y = bill_depth_mm)) + geom_point()
ggplot(data = penguins, mapping = aes(x = bill_length_mm, y = bill_depth_mm)) + geom_point() + geom_smooth(method = "lm")

#There appears to be no relationship between the variables, even when the line of best fit is added to the graph. 

# Question 4 

ggplot(penguins, aes(x = species, y = bill_depth_mm)) +
  geom_point()

#This creates a scatterplot but the results are organized by categories on the x-axis.
#A better option may be to use a boxplot, like the one below:

ggplot(penguins, aes(x = species, y = bill_depth_mm)) +
  geom_boxplot()

# Question 5: Why does the following give an error and how would you fix it?

ggplot(data = penguins) +
  geom_point()

#This code gives an error because the mapping is not specified.
#This can be resolved by mapping aesthetics, for example:

ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point()

#Question 6: What does the na.rm function do in geom_point()?

ggplot(data = penguins, aes(y = bill_depth_mm, x = bill_length_mm)) +
  geom_point(na.rm = TRUE)

#This removes rows that have data missing for the variables specified in the plot's mapping.

#Question 7: Add a caption.

ggplot(data = penguins, aes(y = bill_depth_mm, x = bill_length_mm)) +
  geom_point(na.rm = TRUE) +
  labs(caption = "Data comes from the palmerpenguins package.")

#Question 8: 

ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g, color = bill_depth_mm)) +
  geom_point() +
  geom_smooth(se = TRUE)

#bill_depth_mm should be mapped to color at the global level.
#(It doesn't work when mapped at the geom level)

#Question 9:

#This should graph flipper length on the x and mass on the y,
#There should be three distinct colors based on the islands (categorical)
#Because of the factor variable there should be three lines of fit

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = island)) +
  geom_point() + 
  geom_smooth(se = FALSE)

#Question 10:

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point() +
  geom_smooth()

ggplot() +
  geom_point(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_smooth(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g))

#These are the same plot.  The difference is that one puts the parameters in the global and the other
#specifies the parameters in each geom.  Because each geom in the second is exactly the same as the 
#global in the first, the graphs are identical.

#Exercises 1.4.3 (1-4):

#Question 1:

ggplot(palmerpenguins::penguins, aes(y = species)) +
  geom_bar()

#In this graph, the x-axis stands for the number of countings for each species, 
#and the y-axis stands for the name of each species.

#Question 2:

ggplot(palmerpenguins::penguins, aes(x = species)) +
  geom_bar(color = "red")

ggplot(palmerpenguins::penguins, aes(x = species)) +
  geom_bar(fill = "red")

#In the first plot, only the edges of each bin are red. In the second plot, the
#entire bin is red. The aesthetic "fill" is more useful for changing the color
#of bars.

#Question 3:

#The argument "bins" sets the number of bins in the histogram. The default is 30.

#Question 4:

#First we plot a kernel density graph to be reference.
ggplot(diamonds, aes(x = carat)) +
  geom_density()

#Then we experiment plotting the histograms with binwidth equals 0.01, 0.025,
#0.05, 0,1, 0.2

ggplot(diamonds, aes(x = carat)) +
  geom_histogram(binwidth = 0.01)

ggplot(diamonds, aes(x = carat)) +
  geom_histogram(binwidth = 0.025)

ggplot(diamonds, aes(x = carat)) +
  geom_histogram(binwidth = 0.05)

ggplot(diamonds, aes(x = carat)) +
  geom_histogram(binwidth = 0.1)

ggplot(diamonds, aes(x = carat)) +
  geom_histogram(binwidth = 0.2)

#We can see that, when binwidth = 0.1, the histogram reveals the most interesting
#patterns. In particular, it has five peaks at arount 0.3, 0.6, 1, 1.5, 2. This
#pattern coincides with what we can see from the kernel density graph.

#Exercises 1.5.5 (1-6):

#Question 1:

?mpg

#This function reveals the number of rows, variables, and the full names and units of each variable.
#The categorical variables are: manufacturer, model, trans, drv, fl, class.
#The numerical variables are: displ, year, cyl, cty, hwy.


#Question 2:

library(tidyverse)
ggplot(data = mpg)
ggplot(mpg, aes(x = hwy, y = displ)) + geom_point()

#This created a scatterplot of hwy vs. displ using the mpg data frame.

ggplot(mpg, aes(x = hwy, y = displ, color = year)) + geom_point()

#This created a scatterplot with a third numerical variable, year, mapped to color.

ggplot(mpg, aes(x = hwy, y = displ, size = year)) + geom_point()

#This created a scatterplot with a third numerical variable, year, mapped to size.

ggplot(mpg, aes(x = hwy, y = displ, color = year, size = year)) + geom_point()

#This created a scatterplot with a third numerical variable, year, mapped to color and size.

ggplot(mpg, aes(x = hwy, y = displ, color = year, size = year, shape = trans)) + geom_point()

#This created a scatterplot with a third numerical variable, year, mapped to color and size
#As well as a categorical variable, trans, mapped to shape.
#R Studio is unable to map a numerical variable under the shape function. 

#Question 3:

ggplot(mpg, aes(x = hwy, y = displ, linewidth = year)) + geom_point()

#The linewidth function only works on numerical variables.
#There is no change in the graph by adding the linewidth function.

ggplot(mpg, aes(x = hwy, y = displ, linewidth = year)) + geom_point() + geom_smooth(method = "lm")

#I included a line and the linewidth function.
#R Studio is unable to determine which correct grouping structure to apply the linewidth to.

#Question 4:

ggplot(mpg, aes(x = hwy, y = hwy, color = hwy)) + geom_point()
ggplot(mpg, aes(x = cyl, y = cyl, color = cyl)) + geom_point()

#I first mapped hwy to the same aesthetics.
#I then mapped cyl to the same aesthetics.
#The result in both cases is a straight diagonal line with evenly sized data points.

#Question 5:

ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm, color = species)) + geom_point()

#Adding coloring by species highlights different trends in the relationship between bill length and depth across different species of penguins
#Adelie penguines tend to have shorter but deeper bills.
#Centoo penguines tend to have longer but less deep bills. 
#The datapoints are so scattered that there appeared to be no discernable relationship/trend until the data was separated by species.

ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm, color = species)) + geom_point() + facet_wrap(~species)

#This facets the data by species, creating three separate plots for each species.

#Question 6:

#This code yields two separate legends because species is used to as both the color and shape aesthetics.

ggplot(data = penguins, mapping = aes(x = bill_length_mm, y = bill_depth_mm, color = species, shape = species)) +
geom_point() +
labs(color = "Species", shape = "Species")

#This code combines the two legends by listing them both as "Species" under the labs function.

#Exercises 1.6.1 (1-2):

#Question 1:

ggplot(mpg, aes(x = class)) +
  geom_bar()
ggplot(mpg, aes(x = cty, y = hwy)) +
  geom_point()
ggsave("mpg-plot.png")

#This code saves the second plot because it is the most recent.

#Question 2:

#To save the file as a PDF instead of a PNG, simply change the file name to "mpg-plot.pdf"
