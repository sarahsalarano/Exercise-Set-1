#4.6

#Question 1

library(dplyr)
library(tidyverse)
library(nycflights13)

#Original code: flights|>filter(dest=="IAH")|>group_by(year,month,day)|>summarize(n=n(),
delay=mean(arr_delay,na.rm=TRUE))|>filter(n>10)

flights |>
filter(dest == "IAH") |>
group_by(year, month, day) |>
summarize(delay = mean(arr_delay, na.rm = TRUE)) |>
filter(n() > 10)

#Original code: flights|>filter(carrier=="UA",dest%in%c("IAH","HOU"),sched_dep_time>
0900,sched_arr_time<2000)|>group_by(flight)|>summarize(delay=mean(
arr_delay,na.rm=TRUE),cancelled=sum(is.na(arr_delay)),n=n())|>filter(n>10)

flights |>
filter(carrier == "UA",
dest %in% c("IAH", "HOU"),
sched_dep_time > 0900,
sched_arr_time < 2000) |>
group_by(flight) |>
summarize(delay = mean(arr_delay, na.rm = TRUE), cancelled = sum(is.na(arr_delay))) |>
filter(n() > 10)

#5.2.1

#Question 1

#For Table 1, there are four columns: a country, a year, the number of cases in that 
#country in that year, and the country's population in that year.
#An observation in Table 1 is a unit of country-year with TB cases and the country's population

#For Table 2, there are four columns: a country, a year, a count, and what an indicator
#of what is counted (either cases or the country's population).
#An observation in Table 2 then is a country-year-count_type, which then indicates a count
#depending on the count type

#For Table 3, there are three columns: a country, a year, and a rate in character form,
#which shows the cases of TB divided by the country's population for that year, but the
#mathematical operation is incomplete because it is a character-type column.
#An observation in Table 3 is a country-year with the TB rate

#Question 2

#For Table 2:

table2a <- table2 |>
  pivot_wider(
    names_from = type,
    values_from = count
  ) |>
  mutate(rate = cases / population * 10000)

#For Table 3: 

table3a <- table3 |>
  separate(rate, c('cases', 'population'))

table3a$cases <- as.numeric(table3a$cases)
table3a$population <- as.numeric(table3a$population)
  
table3a <- table3a |>
  mutate(rate = cases / population * 10000)

#7.2.4

students <- read_csv("https://pos.it/r4ds-students-csv")

#Question 1

#Use the read_delim() function
#You may need to use delim = "|" to specify the delimiter

#Question 2

#All arguments are shared between read_csv() and read_tsv()

#Question 3

#read_fwf() reads fixed-width files
#fwf_widths() specifies the fields by width
#fwf_positions() specifies the fields by positions

#Question 4

#We need to specify that 'a,b' is separated by ' and not "
#We use the quote argument with \' to specify the use of '

#read_csv("x,y\n1,'a,b'", quote = "\'")

#Question 5

#read_csv("a,b\n1,2,3\n4,5,6")
#R created a 2x2 tibble, but the rows and columns both have 3 values

#read_csv("a,b,c\n1,2\n1,2,3,4")
#There is one less value in the columns than the rows
#R generates an NA value and combines 3 and 4 to created 34

#read_csv("a,b\n\"1")
#There are no rows specified

#read_csv("a,b\n1,2\na,b")
#The values in the second row contain characters instead of numbers

#read_csv("a;b\n1;3")
#R reads the delimiter as a comma, when it should be a semicolon

#Question 6

annoying <- tibble(
  `1` = 1:10,
  `2` = `1` * 2 + rnorm(length(`1`))
)

#a

`1` <- annoying$1

#b

ggplot(annoying, aes(x = `1`, y = `2`)) +
  geom_point()

#c

annoying <- annoying |>
  mutate(`3` = `2` / `1`)

#d

annoying <- annoying |>
  rename(one = `1`,
         two = `2`,
         three = `3`)

#20.2.9

library(readxl)
library(writexl)
library(janitor)

#Question 1

survey <- read_xlsx("survey.xlsx")

survey <- survey |>
  mutate(n_pets = parse_number(if_else(n_pets == "two", "2", n_pets)))

survey$survey_id <- as.character(survey$survey_id)
survey$n_pets <- as.numeric(survey$n_pets)

#Question 2

roster <- read_xlsx("roster.xlsx")

#Question 3

#a

sales <- read_xlsx("sales.xlsx",
                   col_names = c("id", "n"))

#b

sales <- sales |>
  mutate(brand = ifelse(grepl("^Brand", id), id, NA)) |>
  fill(brand) |>
  filter(!grepl("^Brand", id)) |>
  relocate(brand)
  
#Question 4

bake_sale <- tibble(
  item     = factor(c("brownie", "cupcake", "cookie")),
  quantity = c(10, 5, 8)
)

write_xlsx(bake_sale, path = "bake-sale.xlsx")

#Question 5

students <- read_xls("students.xlsx")

students <- students |>
  janitor::clean_names()

#Question 6

#Attempting to read an xlsx file with the xls function resulting in the following error:
#libxls error: Unable to open file

#21.5.10

#Question 1

#the dplyr distinct() function is translated to the DISTINCT clause of the SQL query
#the dplyr head() function is usually translated to the LIMIT clause of the SQL query,
#but because LIMIT is not an official part of SQL, some databases use TOP or FETCH ROWS.

#Question 2

#SELECT * 
#  FROM flights
#WHERE dep_delay < arr_delay

#This code is filtering for observations in the flights dataset where departure
#delay is less than arrival delay (where the flight lost time in transit)

#in dbplyr this looks like:

library(nycflights13)

dbplyr::copy_nycflights13(con)
flights_db <- tbl(con, "flights")

slow_flights_db <- flights_db |>
  filter(dep_delay < arr_delay)

#SELECT *, distance / (air_time / 60) AS speed
#FROM flights

#This code is 'mutating' a new column named speed with values defined by the formula,
#using data from the flights dataset

speed_db <- flights_db |>
  mutate(speed = distance / (air_time / 60))

#22.5.3

library(arrow)
library(duckdb)

dir.create("data", showWarnings = FALSE)

multi_download(
  "https://r4ds.s3.us-west-2.amazonaws.com/seattle-library-checkouts.csv",
  "data/seattle-library-checkouts.csv",
  resume = TRUE
)

seattle <- open_dataset(
  sources = "seattle-library-checkouts.csv",
  format = "csv"
)

path1 <- "data/seattle-library-checkouts"

seattle |>
  group_by(CheckoutYear) |>
  write_dataset(path = path1, format = "parquet")

seattle_pq <- open_dataset(path1)

#Question 1

seattle1 <- seattle_pq |>
  filter(MaterialType == "BOOK") |>
  group_by(CheckoutYear, Title) |>
  summarize(Checkouts = sum(Checkouts)) |>
  arrange(CheckoutYear, desc(Checkouts)) |>
  top_n(1, Checkouts) |>
  collect()

#Question 2

seattle2 <- seattle_pq |>
  filter(MaterialType == "BOOK") |>
  distinct(Creator, Title) |>
  group_by(Creator) |>
  summarize(n()) |>
  top_n(1) |>
  collect()

#Question 3

seattle3 <- seattle_pq |>
  filter(CheckoutYear >= 2013, MaterialType == "BOOK" | "EBOOK") |>
  group_by(CheckoutYear, MaterialType) |>
  summarize(Checkouts = sum(Checkouts)) |>
  collect()

#The number of ebook checkouts rises significantly during this time

